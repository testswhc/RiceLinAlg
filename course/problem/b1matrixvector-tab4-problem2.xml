<problem display_name="Another Matrix-Vector Equation" linenum="215" tex_filename="./block1/matrixtimesvector.tex" showanswer="finished" attempts="1" rerandomize="per_student">
  <text>
    <p>
Let [mathjaxinline]A[/mathjaxinline] be a [mathjaxinline]3\times 4[/mathjaxinline] matrix with columns [mathjaxinline]v_1, v_2, v_3, v_4[/mathjaxinline]. That is, </p>
    <table id="a0000000051" class="equation" width="100%" cellspacing="0" cellpadding="7" style="table-layout:auto">
      <tr>
        <td class="equation" style="width:80%;vertical-align:middle;text-align:center;border-style:hidden">[mathjax]A = \left[ \begin{array}{cccc} | &amp;  | &amp;  | &amp;  | \\ v_1 &amp;  v_2 &amp;  v_3 &amp;  v_4 \\ | &amp;  | &amp;  | &amp;  | \end{array} \right].[/mathjax]</td>
        <td class="eqnnum" style="width:20%;vertical-align:middle;text-align:left;border-style:hidden"/>
      </tr>
    </table>
    <p>
 Find a solution to the equation [mathjaxinline]Ax = v_2[/mathjaxinline]. </p>
    <script linenum="2" filename="./vectorentry2.tex" type="text/python" system_path="python_lib">
def VectorEntry(expect, ans):
	import ast
	import numpy as np 
  	atol = 0.01
	list_expect = ast.literal_eval(expect)
	vec_expect = np.matrix(list_expect)
  	ret = {"ok":False}
	try:
  		# input format [[1],[2],[3]]
		list_ans = ast.literal_eval(ans)
		vec_ans = np.matrix(list_ans)
  		if vec_ans.shape != vec_expect.shape:
  			ret['msg'] = 'Wrong shape of vector!'
  		elif np.allclose(vec_ans, vec_expect,atol,1e-08):
  			ret['ok'] = True
  		else:
  		# More error message. Will improve this part
  			ret['msg'] = 'something is wrong'   			
	#except SyntaxError:
		#ret['msg'] = 'Wrong input format'
	except SyntaxError:
  		# input format &amp;lt;1,2,3&amp;gt;
		list_ans = ans.replace('&amp;lt;', '[').replace('&amp;gt;', ']')
		list_ans = ast.literal_eval(list_ans)
		vec_ans = np.transpose(np.matrix(list_ans))
  		if vec_ans.shape != vec_expect.shape:
  			ret['msg'] = 'Wrong shape of vector!'
  		elif np.allclose(vec_ans, vec_expect,0.01,1e-08):
  			ret['ok'] = True
  		else:
    		# More error message. Will improve this part
  			ret['msg'] = 'something is wrong' 
  	except:
  		ret['msg'] = 'Wrong input format'
  	return ret 
</script>
    <p>
      <customresponse cfn="VectorEntry" expect="[[0],[1],[0],[0]]">
        <textline correct_answer="[[0],[1],[0],[0]]"/>
      </customresponse>
    </p>
    <p>
      <solution>
        <font color="blue">Answer: </font>
        <font color="blue">
          <p>
 We need not perform any row reduction here. Our desired result [mathjaxinline]v_2[/mathjaxinline] can be written <br/><br/>[mathjaxinline]0v_1 + 1 v_2 + 0 v_3 + 0 v_4[/mathjaxinline] , so <br/><br/>[mathjaxinline]x = \left[ \begin{array}{c} 0 \\ 1 \\ 0 \\ 0 \end{array} \right][/mathjaxinline] is a solution to the equation. </p>
        </font>
      </solution>
    </p>
  </text>
</problem>
